#!/usr/bin/env ruby

# Test script ƒë·ªÉ ki·ªÉm tra vi·ªác s·∫Øp x·∫øp activities theo th·ªùi gian
require_relative 'config/environment'

puts "=== TEST S·∫ÆP X·∫æP ACTIVITIES THEO TH·ªúI GIAN ==="

# T√¨m m·ªôt pineapple crop c√≥ activities
crop = ::Models::Farming::PineappleCrop.includes(:farm_activities).first
unless crop
  puts "‚ùå Kh√¥ng t√¨m th·∫•y pineapple crop n√†o"
  exit 1
end

puts "üîç Ki·ªÉm tra crop: #{crop.name} (ID: #{crop.id})"

# L·∫•y activities theo th·ª© t·ª± ID (c≈©)
activities_by_id = crop.farm_activities.order(:id).to_a
puts "\nüìã Activities theo th·ª© t·ª± ID:"
activities_by_id.each_with_index do |activity, index|
  puts "  #{index + 1}. ID: #{activity.id} | #{activity.description} | #{activity.start_date} | #{activity.activity_type}"
end

# L·∫•y activities theo th·ª© t·ª± start_date (m·ªõi)
activities_by_date = crop.farm_activities.order(:start_date).to_a
puts "\nüìÖ Activities theo th·ª© t·ª± start_date:"
activities_by_date.each_with_index do |activity, index|
  puts "  #{index + 1}. ID: #{activity.id} | #{activity.description} | #{activity.start_date} | #{activity.activity_type}"
end

# So s√°nh th·ª© t·ª±
puts "\nüîç So s√°nh th·ª© t·ª±:"
if activities_by_id.map(&:id) == activities_by_date.map(&:id)
  puts "‚úÖ Th·ª© t·ª± gi·ªëng nhau - activities ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian"
else
  puts "‚ùå Th·ª© t·ª± kh√°c nhau - c·∫ßn ki·ªÉm tra l·∫°i logic s·∫Øp x·∫øp"
  
  puts "\nüìä Chi ti·∫øt so s√°nh:"
  puts "Theo ID:     #{activities_by_id.map(&:id).join(' -> ')}"
  puts "Theo Date:   #{activities_by_date.map(&:id).join(' -> ')}"
end

# Test repository method
puts "\nüß™ Test repository method:"
repo = ::Repositories::Farming::PineappleCropRepository.new
entity = repo.find_with_activities(crop.id)

if entity && entity.farm_activities
  puts "‚úÖ Repository tr·∫£ v·ªÅ #{entity.farm_activities.count} activities"
  
  # Ki·ªÉm tra th·ª© t·ª± trong entity
  entity_activity_ids = entity.farm_activities.map(&:id)
  db_activity_ids = activities_by_date.map(&:id)
  
  if entity_activity_ids == db_activity_ids
    puts "‚úÖ Repository s·∫Øp x·∫øp ƒë√∫ng theo start_date"
  else
    puts "‚ùå Repository s·∫Øp x·∫øp sai"
    puts "Repository: #{entity_activity_ids.join(' -> ')}"
    puts "Database:   #{db_activity_ids.join(' -> ')}"
  end
else
  puts "‚ùå Repository kh√¥ng tr·∫£ v·ªÅ activities"
end

# Test service method
puts "\nüß™ Test service method:"
service = ::Services::Farming::PineappleCropService.new(crop, crop.user)
preview_activities = service.preview_plan({
  name: crop.name,
  field_id: crop.field_id,
  planting_date: crop.planting_date,
  season_type: crop.season_type,
  current_stage: crop.current_stage
})

if preview_activities.any?
  puts "‚úÖ Service preview tr·∫£ v·ªÅ #{preview_activities.count} activities"
  
  # Ki·ªÉm tra th·ª© t·ª± trong preview
  preview_dates = preview_activities.map(&:start_date)
  is_sorted = preview_dates.each_cons(2).all? { |a, b| a <= b }
  
  if is_sorted
    puts "‚úÖ Service preview s·∫Øp x·∫øp ƒë√∫ng theo start_date"
  else
    puts "‚ùå Service preview s·∫Øp x·∫øp sai"
    preview_activities.each_with_index do |activity, index|
      puts "  #{index + 1}. #{activity.start_date} | #{activity.description}"
    end
  end
else
  puts "‚ùå Service preview kh√¥ng tr·∫£ v·ªÅ activities"
end

puts "\n=== K·∫æT TH√öC TEST ===" 